/* automatically generated by rust-bindgen 0.59.2 */

pub const XMPP_NS_CLIENT: &[u8; 14usize] = b"jabber:client\0";
pub const XMPP_NS_COMPONENT: &[u8; 24usize] = b"jabber:component:accept\0";
pub const XMPP_NS_STREAMS: &[u8; 33usize] = b"http://etherx.jabber.org/streams\0";
pub const XMPP_NS_STREAMS_IETF: &[u8; 36usize] = b"urn:ietf:params:xml:ns:xmpp-streams\0";
pub const XMPP_NS_STANZAS_IETF: &[u8; 36usize] = b"urn:ietf:params:xml:ns:xmpp-stanzas\0";
pub const XMPP_NS_TLS: &[u8; 32usize] = b"urn:ietf:params:xml:ns:xmpp-tls\0";
pub const XMPP_NS_SASL: &[u8; 33usize] = b"urn:ietf:params:xml:ns:xmpp-sasl\0";
pub const XMPP_NS_BIND: &[u8; 33usize] = b"urn:ietf:params:xml:ns:xmpp-bind\0";
pub const XMPP_NS_SESSION: &[u8; 36usize] = b"urn:ietf:params:xml:ns:xmpp-session\0";
pub const XMPP_NS_AUTH: &[u8; 15usize] = b"jabber:iq:auth\0";
pub const XMPP_NS_DISCO_INFO: &[u8; 38usize] = b"http://jabber.org/protocol/disco#info\0";
pub const XMPP_NS_DISCO_ITEMS: &[u8; 39usize] = b"http://jabber.org/protocol/disco#items\0";
pub const XMPP_NS_ROSTER: &[u8; 17usize] = b"jabber:iq:roster\0";
pub const XMPP_NS_REGISTER: &[u8; 19usize] = b"jabber:iq:register\0";
pub const XMPP_EOK: u32 = 0;
pub const XMPP_EMEM: i32 = -1;
pub const XMPP_EINVOP: i32 = -2;
pub const XMPP_EINT: i32 = -3;
pub const XMPP_CONN_FLAG_DISABLE_TLS: u32 = 1;
pub const XMPP_CONN_FLAG_MANDATORY_TLS: u32 = 2;
pub const XMPP_CONN_FLAG_LEGACY_SSL: u32 = 4;
pub const XMPP_CONN_FLAG_TRUST_TLS: u32 = 8;
pub const XMPP_CONN_FLAG_LEGACY_AUTH: u32 = 16;
pub const XMPP_SHA1_DIGEST_SIZE: u32 = 20;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn xmpp_initialize();
}
extern "C" {
    pub fn xmpp_shutdown();
}
extern "C" {
    pub fn xmpp_version_check(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type xmpp_mem_t = _xmpp_mem_t;
pub type xmpp_log_t = _xmpp_log_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_ctx_t {
    _unused: [u8; 0],
}
pub type xmpp_ctx_t = _xmpp_ctx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_tlscert_t {
    _unused: [u8; 0],
}
pub type xmpp_tlscert_t = _xmpp_tlscert_t;
extern "C" {
    pub fn xmpp_ctx_new(mem: *const xmpp_mem_t, log: *const xmpp_log_t) -> *mut xmpp_ctx_t;
}
extern "C" {
    pub fn xmpp_ctx_free(ctx: *mut xmpp_ctx_t);
}
extern "C" {
    pub fn xmpp_ctx_set_verbosity(ctx: *mut xmpp_ctx_t, level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmpp_free(ctx: *const xmpp_ctx_t, p: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_mem_t {
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            size: size_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, userdata: *mut ::std::os::raw::c_void),
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            size: size_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__xmpp_mem_t() {
    assert_eq!(
        ::std::mem::size_of::<_xmpp_mem_t>(),
        32usize,
        concat!("Size of: ", stringify!(_xmpp_mem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmpp_mem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xmpp_mem_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmpp_mem_t>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmpp_mem_t),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmpp_mem_t>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmpp_mem_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmpp_mem_t>())).realloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmpp_mem_t),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmpp_mem_t>())).userdata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmpp_mem_t),
            "::",
            stringify!(userdata)
        )
    );
}
pub const xmpp_log_level_t_XMPP_LEVEL_DEBUG: xmpp_log_level_t = 0;
pub const xmpp_log_level_t_XMPP_LEVEL_INFO: xmpp_log_level_t = 1;
pub const xmpp_log_level_t_XMPP_LEVEL_WARN: xmpp_log_level_t = 2;
pub const xmpp_log_level_t_XMPP_LEVEL_ERROR: xmpp_log_level_t = 3;
pub type xmpp_log_level_t = ::std::os::raw::c_uint;
pub const xmpp_conn_type_t_XMPP_UNKNOWN: xmpp_conn_type_t = 0;
pub const xmpp_conn_type_t_XMPP_CLIENT: xmpp_conn_type_t = 1;
pub const xmpp_conn_type_t_XMPP_COMPONENT: xmpp_conn_type_t = 2;
pub type xmpp_conn_type_t = ::std::os::raw::c_uint;
pub type xmpp_log_handler = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        level: xmpp_log_level_t,
        area: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_log_t {
    pub handler: xmpp_log_handler,
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__xmpp_log_t() {
    assert_eq!(
        ::std::mem::size_of::<_xmpp_log_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xmpp_log_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmpp_log_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xmpp_log_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmpp_log_t>())).handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmpp_log_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmpp_log_t>())).userdata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmpp_log_t),
            "::",
            stringify!(userdata)
        )
    );
}
extern "C" {
    pub fn xmpp_get_default_logger(level: xmpp_log_level_t) -> *mut xmpp_log_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_conn_t {
    _unused: [u8; 0],
}
pub type xmpp_conn_t = _xmpp_conn_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_stanza_t {
    _unused: [u8; 0],
}
pub type xmpp_stanza_t = _xmpp_stanza_t;
pub const xmpp_conn_event_t_XMPP_CONN_CONNECT: xmpp_conn_event_t = 0;
pub const xmpp_conn_event_t_XMPP_CONN_RAW_CONNECT: xmpp_conn_event_t = 1;
pub const xmpp_conn_event_t_XMPP_CONN_DISCONNECT: xmpp_conn_event_t = 2;
pub const xmpp_conn_event_t_XMPP_CONN_FAIL: xmpp_conn_event_t = 3;
pub type xmpp_conn_event_t = ::std::os::raw::c_uint;
pub const xmpp_error_type_t_XMPP_SE_BAD_FORMAT: xmpp_error_type_t = 0;
pub const xmpp_error_type_t_XMPP_SE_BAD_NS_PREFIX: xmpp_error_type_t = 1;
pub const xmpp_error_type_t_XMPP_SE_CONFLICT: xmpp_error_type_t = 2;
pub const xmpp_error_type_t_XMPP_SE_CONN_TIMEOUT: xmpp_error_type_t = 3;
pub const xmpp_error_type_t_XMPP_SE_HOST_GONE: xmpp_error_type_t = 4;
pub const xmpp_error_type_t_XMPP_SE_HOST_UNKNOWN: xmpp_error_type_t = 5;
pub const xmpp_error_type_t_XMPP_SE_IMPROPER_ADDR: xmpp_error_type_t = 6;
pub const xmpp_error_type_t_XMPP_SE_INTERNAL_SERVER_ERROR: xmpp_error_type_t = 7;
pub const xmpp_error_type_t_XMPP_SE_INVALID_FROM: xmpp_error_type_t = 8;
pub const xmpp_error_type_t_XMPP_SE_INVALID_ID: xmpp_error_type_t = 9;
pub const xmpp_error_type_t_XMPP_SE_INVALID_NS: xmpp_error_type_t = 10;
pub const xmpp_error_type_t_XMPP_SE_INVALID_XML: xmpp_error_type_t = 11;
pub const xmpp_error_type_t_XMPP_SE_NOT_AUTHORIZED: xmpp_error_type_t = 12;
pub const xmpp_error_type_t_XMPP_SE_POLICY_VIOLATION: xmpp_error_type_t = 13;
pub const xmpp_error_type_t_XMPP_SE_REMOTE_CONN_FAILED: xmpp_error_type_t = 14;
pub const xmpp_error_type_t_XMPP_SE_RESOURCE_CONSTRAINT: xmpp_error_type_t = 15;
pub const xmpp_error_type_t_XMPP_SE_RESTRICTED_XML: xmpp_error_type_t = 16;
pub const xmpp_error_type_t_XMPP_SE_SEE_OTHER_HOST: xmpp_error_type_t = 17;
pub const xmpp_error_type_t_XMPP_SE_SYSTEM_SHUTDOWN: xmpp_error_type_t = 18;
pub const xmpp_error_type_t_XMPP_SE_UNDEFINED_CONDITION: xmpp_error_type_t = 19;
pub const xmpp_error_type_t_XMPP_SE_UNSUPPORTED_ENCODING: xmpp_error_type_t = 20;
pub const xmpp_error_type_t_XMPP_SE_UNSUPPORTED_STANZA_TYPE: xmpp_error_type_t = 21;
pub const xmpp_error_type_t_XMPP_SE_UNSUPPORTED_VERSION: xmpp_error_type_t = 22;
pub const xmpp_error_type_t_XMPP_SE_XML_NOT_WELL_FORMED: xmpp_error_type_t = 23;
pub type xmpp_error_type_t = ::std::os::raw::c_uint;
#[doc = "< X.509 Version"]
pub const xmpp_cert_element_t_XMPP_CERT_VERSION: xmpp_cert_element_t = 0;
#[doc = "< SerialNumber"]
pub const xmpp_cert_element_t_XMPP_CERT_SERIALNUMBER: xmpp_cert_element_t = 1;
#[doc = "< Subject"]
pub const xmpp_cert_element_t_XMPP_CERT_SUBJECT: xmpp_cert_element_t = 2;
#[doc = "< Issuer"]
pub const xmpp_cert_element_t_XMPP_CERT_ISSUER: xmpp_cert_element_t = 3;
#[doc = "< Issued on"]
pub const xmpp_cert_element_t_XMPP_CERT_NOTBEFORE: xmpp_cert_element_t = 4;
#[doc = "< Expires on"]
pub const xmpp_cert_element_t_XMPP_CERT_NOTAFTER: xmpp_cert_element_t = 5;
#[doc = "< Public Key Algorithm"]
pub const xmpp_cert_element_t_XMPP_CERT_KEYALG: xmpp_cert_element_t = 6;
#[doc = "< Certificate Signature Algorithm"]
pub const xmpp_cert_element_t_XMPP_CERT_SIGALG: xmpp_cert_element_t = 7;
#[doc = "< Fingerprint SHA-1"]
pub const xmpp_cert_element_t_XMPP_CERT_FINGERPRINT_SHA1: xmpp_cert_element_t = 8;
#[doc = "< Fingerprint SHA-256"]
pub const xmpp_cert_element_t_XMPP_CERT_FINGERPRINT_SHA256: xmpp_cert_element_t = 9;
#[doc = "< Last element of the enum"]
pub const xmpp_cert_element_t_XMPP_CERT_ELEMENT_MAX: xmpp_cert_element_t = 10;
#[doc = " Certificate Elements"]
#[doc = ""]
#[doc = "  @ingroup TLS"]
pub type xmpp_cert_element_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xmpp_stream_error_t {
    pub type_: xmpp_error_type_t,
    pub text: *mut ::std::os::raw::c_char,
    pub stanza: *mut xmpp_stanza_t,
}
#[test]
fn bindgen_test_layout_xmpp_stream_error_t() {
    assert_eq!(
        ::std::mem::size_of::<xmpp_stream_error_t>(),
        24usize,
        concat!("Size of: ", stringify!(xmpp_stream_error_t))
    );
    assert_eq!(
        ::std::mem::align_of::<xmpp_stream_error_t>(),
        8usize,
        concat!("Alignment of ", stringify!(xmpp_stream_error_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmpp_stream_error_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xmpp_stream_error_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmpp_stream_error_t>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xmpp_stream_error_t),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmpp_stream_error_t>())).stanza as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xmpp_stream_error_t),
            "::",
            stringify!(stanza)
        )
    );
}
pub type xmpp_conn_handler = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut xmpp_conn_t,
        event: xmpp_conn_event_t,
        error: ::std::os::raw::c_int,
        stream_error: *mut xmpp_stream_error_t,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " The Handler function which will be called when the TLS stack can't"]
#[doc = "  verify the authenticity of a Certificate that gets presented by"]
#[doc = "  the server we're trying to connect to."]
#[doc = ""]
#[doc = "  When this function is called and details of the `cert` have to be"]
#[doc = "  kept, please copy them yourself. The `cert` object will be free'd"]
#[doc = "  automatically when this function returns."]
#[doc = ""]
#[doc = "  NB: `errormsg` is specific per certificate on OpenSSL and the same"]
#[doc = "      for all certificates on GnuTLS."]
#[doc = ""]
#[doc = "  @param cert a Strophe certificate object"]
#[doc = "  @param errormsg The error that caused this."]
#[doc = ""]
#[doc = "  @return 0 if the connection attempt should be terminated,"]
#[doc = "          1 if the connection should be established."]
#[doc = ""]
#[doc = "  @ingroup TLS"]
pub type xmpp_certfail_handler = ::std::option::Option<
    unsafe extern "C" fn(
        cert: *const xmpp_tlscert_t,
        errormsg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xmpp_send_error(
        conn: *mut xmpp_conn_t,
        type_: xmpp_error_type_t,
        text: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmpp_conn_new(ctx: *mut xmpp_ctx_t) -> *mut xmpp_conn_t;
}
extern "C" {
    pub fn xmpp_conn_clone(conn: *mut xmpp_conn_t) -> *mut xmpp_conn_t;
}
extern "C" {
    pub fn xmpp_conn_release(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_get_flags(conn: *const xmpp_conn_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xmpp_conn_set_flags(
        conn: *mut xmpp_conn_t,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_get_jid(conn: *const xmpp_conn_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_conn_get_bound_jid(conn: *const xmpp_conn_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_conn_set_jid(conn: *mut xmpp_conn_t, jid: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn xmpp_conn_set_cafile(conn: *mut xmpp_conn_t, path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn xmpp_conn_set_capath(conn: *mut xmpp_conn_t, path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn xmpp_conn_set_certfail_handler(conn: *mut xmpp_conn_t, hndl: xmpp_certfail_handler);
}
extern "C" {
    pub fn xmpp_conn_get_peer_cert(conn: *mut xmpp_conn_t) -> *mut xmpp_tlscert_t;
}
extern "C" {
    pub fn xmpp_conn_set_client_cert(
        conn: *mut xmpp_conn_t,
        cert: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmpp_conn_cert_xmppaddr_num(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn xmpp_conn_cert_xmppaddr(
        conn: *mut xmpp_conn_t,
        n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_conn_get_pass(conn: *const xmpp_conn_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_conn_set_pass(conn: *mut xmpp_conn_t, pass: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn xmpp_conn_get_context(conn: *mut xmpp_conn_t) -> *mut xmpp_ctx_t;
}
extern "C" {
    pub fn xmpp_conn_disable_tls(conn: *mut xmpp_conn_t);
}
extern "C" {
    pub fn xmpp_conn_is_secured(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_set_keepalive(
        conn: *mut xmpp_conn_t,
        timeout: ::std::os::raw::c_int,
        interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmpp_conn_is_connecting(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_is_connected(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_is_disconnected(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_connect_client(
        conn: *mut xmpp_conn_t,
        altdomain: *const ::std::os::raw::c_char,
        altport: ::std::os::raw::c_ushort,
        callback: xmpp_conn_handler,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_connect_component(
        conn: *mut xmpp_conn_t,
        server: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_ushort,
        callback: xmpp_conn_handler,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_connect_raw(
        conn: *mut xmpp_conn_t,
        altdomain: *const ::std::os::raw::c_char,
        altport: ::std::os::raw::c_ushort,
        callback: xmpp_conn_handler,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_open_stream_default(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_open_stream(
        conn: *mut xmpp_conn_t,
        attributes: *mut *mut ::std::os::raw::c_char,
        attributes_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_conn_tls_start(conn: *mut xmpp_conn_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_disconnect(conn: *mut xmpp_conn_t);
}
extern "C" {
    pub fn xmpp_send(conn: *mut xmpp_conn_t, stanza: *mut xmpp_stanza_t);
}
extern "C" {
    pub fn xmpp_send_raw_string(conn: *mut xmpp_conn_t, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn xmpp_send_raw(conn: *mut xmpp_conn_t, data: *const ::std::os::raw::c_char, len: size_t);
}
pub type xmpp_timed_handler = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut xmpp_conn_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xmpp_timed_handler_add(
        conn: *mut xmpp_conn_t,
        handler: xmpp_timed_handler,
        period: ::std::os::raw::c_ulong,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xmpp_timed_handler_delete(conn: *mut xmpp_conn_t, handler: xmpp_timed_handler);
}
pub type xmpp_global_timed_handler = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut xmpp_ctx_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xmpp_global_timed_handler_add(
        ctx: *mut xmpp_ctx_t,
        handler: xmpp_global_timed_handler,
        period: ::std::os::raw::c_ulong,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xmpp_global_timed_handler_delete(
        ctx: *mut xmpp_ctx_t,
        handler: xmpp_global_timed_handler,
    );
}
pub type xmpp_handler = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut xmpp_conn_t,
        stanza: *mut xmpp_stanza_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xmpp_handler_add(
        conn: *mut xmpp_conn_t,
        handler: xmpp_handler,
        ns: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xmpp_handler_delete(conn: *mut xmpp_conn_t, handler: xmpp_handler);
}
extern "C" {
    pub fn xmpp_id_handler_add(
        conn: *mut xmpp_conn_t,
        handler: xmpp_handler,
        id: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xmpp_id_handler_delete(
        conn: *mut xmpp_conn_t,
        handler: xmpp_handler,
        id: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmpp_stanza_new(ctx: *mut xmpp_ctx_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_new_from_string(
        ctx: *mut xmpp_ctx_t,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_clone(stanza: *mut xmpp_stanza_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_copy(stanza: *const xmpp_stanza_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_release(stanza: *mut xmpp_stanza_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_get_context(stanza: *const xmpp_stanza_t) -> *mut xmpp_ctx_t;
}
extern "C" {
    pub fn xmpp_stanza_is_text(stanza: *mut xmpp_stanza_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_is_tag(stanza: *mut xmpp_stanza_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_to_text(
        stanza: *mut xmpp_stanza_t,
        buf: *mut *mut ::std::os::raw::c_char,
        buflen: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_get_children(stanza: *mut xmpp_stanza_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_get_child_by_name(
        stanza: *mut xmpp_stanza_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_get_child_by_ns(
        stanza: *mut xmpp_stanza_t,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_get_child_by_name_and_ns(
        stanza: *mut xmpp_stanza_t,
        name: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_get_next(stanza: *mut xmpp_stanza_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_add_child(
        stanza: *mut xmpp_stanza_t,
        child: *mut xmpp_stanza_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_add_child_ex(
        stanza: *mut xmpp_stanza_t,
        child: *mut xmpp_stanza_t,
        do_clone: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_get_attribute(
        stanza: *mut xmpp_stanza_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_attribute_count(stanza: *mut xmpp_stanza_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_get_attributes(
        stanza: *mut xmpp_stanza_t,
        attr: *mut *const ::std::os::raw::c_char,
        attrlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_get_text(stanza: *mut xmpp_stanza_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_text_ptr(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_name(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_set_attribute(
        stanza: *mut xmpp_stanza_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_name(
        stanza: *mut xmpp_stanza_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_text(
        stanza: *mut xmpp_stanza_t,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_text_with_size(
        stanza: *mut xmpp_stanza_t,
        text: *const ::std::os::raw::c_char,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_del_attribute(
        stanza: *mut xmpp_stanza_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_get_ns(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_type(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_id(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_to(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_get_from(stanza: *mut xmpp_stanza_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_stanza_set_ns(
        stanza: *mut xmpp_stanza_t,
        ns: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_id(
        stanza: *mut xmpp_stanza_t,
        id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_type(
        stanza: *mut xmpp_stanza_t,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_to(
        stanza: *mut xmpp_stanza_t,
        to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_set_from(
        stanza: *mut xmpp_stanza_t,
        from: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_stanza_reply(stanza: *mut xmpp_stanza_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_stanza_reply_error(
        stanza: *mut xmpp_stanza_t,
        error_type: *const ::std::os::raw::c_char,
        condition: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_message_new(
        ctx: *mut xmpp_ctx_t,
        type_: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        id: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_message_get_body(msg: *mut xmpp_stanza_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_message_set_body(
        msg: *mut xmpp_stanza_t,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmpp_iq_new(
        ctx: *mut xmpp_ctx_t,
        type_: *const ::std::os::raw::c_char,
        id: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_presence_new(ctx: *mut xmpp_ctx_t) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_error_new(
        ctx: *mut xmpp_ctx_t,
        type_: xmpp_error_type_t,
        text: *const ::std::os::raw::c_char,
    ) -> *mut xmpp_stanza_t;
}
extern "C" {
    pub fn xmpp_jid_new(
        ctx: *mut xmpp_ctx_t,
        node: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        resource: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_jid_bare(
        ctx: *mut xmpp_ctx_t,
        jid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_jid_node(
        ctx: *mut xmpp_ctx_t,
        jid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_jid_domain(
        ctx: *mut xmpp_ctx_t,
        jid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_jid_resource(
        ctx: *mut xmpp_ctx_t,
        jid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_run_once(ctx: *mut xmpp_ctx_t, timeout: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn xmpp_run(ctx: *mut xmpp_ctx_t);
}
extern "C" {
    pub fn xmpp_stop(ctx: *mut xmpp_ctx_t);
}
extern "C" {
    pub fn xmpp_ctx_set_timeout(ctx: *mut xmpp_ctx_t, timeout: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn xmpp_tlscert_get_ctx(cert: *const xmpp_tlscert_t) -> *mut xmpp_ctx_t;
}
extern "C" {
    pub fn xmpp_tlscert_get_conn(cert: *const xmpp_tlscert_t) -> *mut xmpp_conn_t;
}
extern "C" {
    pub fn xmpp_tlscert_get_pem(cert: *const xmpp_tlscert_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_tlscert_get_dnsname(
        cert: *const xmpp_tlscert_t,
        n: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_tlscert_get_string(
        cert: *const xmpp_tlscert_t,
        elmnt: xmpp_cert_element_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_tlscert_get_description(
        elmnt: xmpp_cert_element_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_tlscert_free(cert: *mut xmpp_tlscert_t);
}
extern "C" {
    pub fn xmpp_uuid_gen(ctx: *mut xmpp_ctx_t) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmpp_sha1_t {
    _unused: [u8; 0],
}
pub type xmpp_sha1_t = _xmpp_sha1_t;
extern "C" {
    pub fn xmpp_sha1(
        ctx: *mut xmpp_ctx_t,
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_sha1_digest(
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
        digest: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn xmpp_sha1_new(ctx: *mut xmpp_ctx_t) -> *mut xmpp_sha1_t;
}
extern "C" {
    pub fn xmpp_sha1_free(sha1: *mut xmpp_sha1_t);
}
extern "C" {
    pub fn xmpp_sha1_update(
        sha1: *mut xmpp_sha1_t,
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
    );
}
extern "C" {
    pub fn xmpp_sha1_final(sha1: *mut xmpp_sha1_t);
}
extern "C" {
    pub fn xmpp_sha1_to_string(
        sha1: *mut xmpp_sha1_t,
        s: *mut ::std::os::raw::c_char,
        slen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_sha1_to_string_alloc(sha1: *mut xmpp_sha1_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_sha1_to_digest(sha1: *mut xmpp_sha1_t, digest: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn xmpp_base64_encode(
        ctx: *mut xmpp_ctx_t,
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_base64_decode_str(
        ctx: *mut xmpp_ctx_t,
        base64: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmpp_base64_decode_bin(
        ctx: *mut xmpp_ctx_t,
        base64: *const ::std::os::raw::c_char,
        len: size_t,
        out: *mut *mut ::std::os::raw::c_uchar,
        outlen: *mut size_t,
    );
}
